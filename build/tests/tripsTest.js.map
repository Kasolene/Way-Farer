{"version":3,"sources":["../../server/tests/tripsTest.js"],"names":["should","chai","use","chaiHttp","createTripDetails","busLicenseNumber","seatingCapacity","origin","destination","tripDate","fare","createTripDetailsUndefinned","createTripDetailsTrue","describe","it","done","request","app","post","set","users","token","send","end","err","res","have","status"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEA,IAAMA,MAAM,GAAGC,iBAAKD,MAAL,EAAf;;AACAC,iBAAKC,GAAL,CAASC,oBAAT;;AAEA,IAAMC,iBAAiB,GAAG;AACtBC,EAAAA,gBAAgB,EAAE,YADI;AAEtBC,EAAAA,eAAe,EAAE,EAFK;AAGtBC,EAAAA,MAAM,EAAE,QAHc;AAItBC,EAAAA,WAAW,EAAE,SAJS;AAKtBC,EAAAA,QAAQ,EAAE,aALY;AAMtBC,EAAAA,IAAI,EAAE;AANgB,CAA1B;AASE,IAAMC,2BAA2B,GAAG;AAClCN,EAAAA,gBAAgB,EAAE,YADgB;AAElCC,EAAAA,eAAe,EAAE,EAFiB;AAGlCC,EAAAA,MAAM,EAAE,QAH0B;AAIlCC,EAAAA,WAAW,EAAE,SAJqB;AAKlCC,EAAAA,QAAQ,EAAE;AALwB,CAApC;AASA,IAAMG,qBAAqB,GAAG;AAC5BP,EAAAA,gBAAgB,EAAE,YADU;AAE5BC,EAAAA,eAAe,EAAE,EAFW;AAG5BC,EAAAA,MAAM,EAAE,QAHoB;AAI5BC,EAAAA,WAAW,EAAE,SAJe;AAK5BC,EAAAA,QAAQ,EAAE,aALkB;AAM5BC,EAAAA,IAAI,EAAE;AANsB,CAA9B;AASAG,QAAQ,CAAC,MAAD,EAAS,YAAM;AACrBC,EAAAA,EAAE,CAAC,oDAAD,EAAuD,UAACC,IAAD,EAAU;AACjEd,qBAAKe,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,cADR,EAEGC,GAFH,CAEO,eAFP,EAEwBC,kBAAM,CAAN,EAASC,KAFjC,EAGGC,IAHH,CAGQX,2BAHR,EAIGY,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAACzB,MAAJ,CAAW0B,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAZ,MAAAA,IAAI;AACL,KAPH;AAQD,GATC,CAAF;AAYAD,EAAAA,EAAE,CAAC,kEAAD,EAAqE,UAACC,IAAD,EAAU;AAC/Ed,qBAAKe,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,cADR,EAEGC,GAFH,CAEO,eAFP,EAEwBC,kBAAM,CAAN,EAASC,KAFjC,EAGGC,IAHH,CAGQV,qBAHR,EAIGW,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAACzB,MAAJ,CAAW0B,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAZ,MAAAA,IAAI;AACL,KAPH;AAQD,GATC,CAAF;AAYAD,EAAAA,EAAE,CAAC,sDAAD,EAAyD,UAACC,IAAD,EAAU;AACnEd,qBAAKe,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,cADR,EAEGC,GAFH,CAEO,eAFP,EAEwBC,kBAAM,CAAN,EAASC,KAFjC,EAGGC,IAHH,CAGQX,2BAHR,EAIGY,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAACzB,MAAJ,CAAW0B,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAZ,MAAAA,IAAI;AACL,KAPH;AAQD,GATC,CAAF;AAUD,CAnCO,CAAR;AAqCF","sourcesContent":["import assert from 'assert';\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport { expect } from 'chai';\r\nimport  app from '../index';\r\nimport trips from '../models/Trips';\r\nimport users from '../models/Users';\r\n\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\nconst createTripDetails = {\r\n    busLicenseNumber: 'KHU-243-KG',\r\n    seatingCapacity: 48,\r\n    origin: 'Kigali',\r\n    destination: 'Kampala',\r\n    tripDate: '12.05.2019 ',\r\n    fare: 10,\r\n  };\r\n  \r\n  const createTripDetailsUndefinned = {\r\n    busLicenseNumber: 'KHU-243-KG',\r\n    seatingCapacity: 48,\r\n    origin: 'Kigali',\r\n    destination: 'Kampala',\r\n    tripDate: '12.05.2019 ',\r\n  };\r\n  \r\n  \r\n  const createTripDetailsTrue = {\r\n    busLicenseNumber: 'KHU-243-KG',\r\n    seatingCapacity: 48,\r\n    origin: 'Kigali',\r\n    destination: 'Kampala',\r\n    tripDate: '12.05.2019 ',\r\n    fare: 10,\r\n  };\r\n\r\n  describe('trip', () => {\r\n    it('it should not create a trip with undefinned values', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/trip')\r\n        .set('Authorization', users[0].token)\r\n        .send(createTripDetailsUndefinned )\r\n        .end((err, res) => {\r\n          res.should.have.status(400);\r\n          done();\r\n        });\r\n    });\r\n  \r\n  \r\n    it('should return a 200 status and trip data when everything is okey', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/trip')\r\n        .set('Authorization', users[0].token)\r\n        .send(createTripDetailsTrue)\r\n        .end((err, res) => {\r\n          res.should.have.status(200);\r\n          done();\r\n        });\r\n    });\r\n  \r\n\r\n    it('should not create account with undefinned parameters', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/trip')\r\n        .set('Authorization', users[0].token)\r\n        .send(createTripDetailsUndefinned)\r\n        .end((err, res) => {\r\n          res.should.have.status(400);\r\n          done();\r\n        });\r\n    });\r\n  }); \r\n\r\n/*\r\n  it('should create a trip successful', (done) => {\r\n    chai\r\n      .request(app)\r\n      .post('/api/v1/trip')\r\n      .set('Authorization', users[0].token)\r\n      .send(createTripDetails)\r\n      .end((err, res) => {\r\n        const { body } = res;\r\n        tripId = body.data.tripId;\r\n        expect(res.status).to.equal(201);\r\n        expect(res.status).to.be.a('number');\r\n        expect(body).to.be.an('object');\r\n        expect(body.data).to.be.have.property('status');\r\n        done();\r\n      });\r\n  });*/"],"file":"tripsTest.js"}