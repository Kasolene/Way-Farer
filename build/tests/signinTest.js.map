{"version":3,"sources":["../../server/tests/signinTest.js"],"names":["should","chai","use","chaiHttp","signinDetails","email","password","signinDetailsTrue","signinDetailsEmpty","describe","it","done","request","app","post","send","end","err","res","have","status","expect","body","data","equal"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAEA,IAAMA,MAAM,GAAGC,iBAAKD,MAAL,EAAf;;AACAC,iBAAKC,GAAL,CAASC,oBAAT;;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,mBADa;AAEpBC,EAAAA,QAAQ,EAAE;AAFU,CAAtB;AAIA,IAAMC,iBAAiB,GAAG;AACxBF,EAAAA,KAAK,EAAE,mBADiB;AAExBC,EAAAA,QAAQ,EAAE;AAFc,CAA1B;AAIA,IAAME,kBAAkB,GAAG;AACzBH,EAAAA,KAAK,EAAE,mBADkB;AAEzBC,EAAAA,QAAQ,EAAE;AAFe,CAA3B;AAKAG,QAAQ,CAAC,OAAD,EAAU,YAAM;AACtBC,EAAAA,EAAE,CAAC,4CAAD,EAA+C,UAACC,IAAD,EAAU;AACzDV,qBAAKW,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQ,EAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAAClB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAT,MAAAA,IAAI;AACL,KANH;AAOD,GARC,CAAF;AAUAD,EAAAA,EAAE,CAAC,iEAAD,EAAoE,UAACC,IAAD,EAAU;AAC9EV,qBAAKW,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQP,kBAFR,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAAClB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB,EADiB,CAEzB;;AACQT,MAAAA,IAAI;AACL,KAPH;AAQD,GATC,CAAF;AAWAD,EAAAA,EAAE,CAAC,iEAAD,EAAoE,UAACC,IAAD,EAAU;AAC9EV,qBAAKW,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQX,aAFR,EAGGY,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAAClB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAT,MAAAA,IAAI;AACL,KANH;AAOD,GARC,CAAF;AAUAD,EAAAA,EAAE,CAAC,kEAAD,EAAqE,UAACC,IAAD,EAAU;AAC/EV,qBAAKW,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQR,iBAFR,EAGGS,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAAClB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;;AACAnB,uBAAKoB,MAAL,CAAYH,GAAG,CAACI,IAAJ,CAASC,IAAT,CAAclB,KAA1B,EAAiCmB,KAAjC,CAAuC,mBAAvC;;AACAb,MAAAA,IAAI;AACL,KAPH;AAQD,GATC,CAAF;AAUD,CA1CO,CAAR","sourcesContent":["import assert from 'assert';\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport { expect } from 'chai';\r\nimport   app from '../index';\r\nimport users from '../models/Users';\r\n\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\nconst signinDetails = {\r\n  email: 'nicolas@gmail.com',\r\n  password: 'nico',\r\n};\r\nconst signinDetailsTrue = {\r\n  email: 'nicolas@gmail.com',\r\n  password: 'nicolas123',\r\n};\r\nconst signinDetailsEmpty = {\r\n  email: 'nicolas@gmail.com',\r\n  password: '',\r\n};\r\n\r\ndescribe('login', () => {\r\n  it('it should not login with undefinned values', (done) => {\r\n    chai.request(app)\r\n      .post('/api/v1/auth/signin')\r\n      .send('')\r\n      .end((err, res) => {\r\n        res.should.have.status(400);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should return a 400 status when empty mail or password provided', (done) => {\r\n    chai.request(app)\r\n      .post('/api/v1/auth/signin')\r\n      .send(signinDetailsEmpty)\r\n      .end((err, res) => {\r\n        res.should.have.status(400);\r\n//        chai.expect(res.body.message).equal('You provided a wrong email or password');\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should return a 401 status when wrong mail or password provided', (done) => {\r\n    chai.request(app)\r\n      .post('/api/v1/auth/signin')\r\n      .send(signinDetails)\r\n      .end((err, res) => {\r\n        res.should.have.status(401);\r\n        done();\r\n      });\r\n  });\r\n\r\n  it('should return a 200 status and user data when everything is okey', (done) => {\r\n    chai.request(app)\r\n      .post('/api/v1/auth/signin')\r\n      .send(signinDetailsTrue)\r\n      .end((err, res) => {\r\n        res.should.have.status(200);\r\n        chai.expect(res.body.data.email).equal('nicolas@gmail.com');\r\n        done();\r\n      });\r\n  });\r\n});\r\n"],"file":"signinTest.js"}