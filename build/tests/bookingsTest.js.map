{"version":3,"sources":["../../server/tests/bookingsTest.js"],"names":["should","chai","use","chaiHttp","bookTripDetails","tripId","userEmail","bookTripDetailsUndefinned","bookTripDetailsTrue","describe","it","done","request","app","post","send","end","err","res","have","status"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,MAAM,GAAGC,iBAAKD,MAAL,EAAf;;AACAC,iBAAKC,GAAL,CAASC,oBAAT;;AAEA,IAAMC,eAAe,GAAG;AACpBC,EAAAA,MAAM,EAAG,GADW;AAEpBC,EAAAA,SAAS,EAAG;AAFQ,CAAxB;AAKE,IAAMC,yBAAyB,GAAG;AAChCD,EAAAA,SAAS,EAAG;AADoB,CAAlC;AAIA,IAAME,mBAAmB,GAAG;AAC1BH,EAAAA,MAAM,EAAG,GADiB;AAE1BC,EAAAA,SAAS,EAAG;AAFc,CAA5B;AAKAG,QAAQ,CAAC,SAAD,EAAY,YAAM;AACxBC,EAAAA,EAAE,CAAC,kDAAD,EAAqD,UAACC,IAAD,EAAU;AAC/DV,qBAAKW,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,kBADR,EAEGC,IAFH,CAEQR,yBAFR,EAGGS,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAAClB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAT,MAAAA,IAAI;AACL,KANH;AAOD,GARC,CAAF;AAWAD,EAAAA,EAAE,CAAC,kEAAD,EAAqE,UAACC,IAAD,EAAU;AAC/EV,qBAAKW,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,kBADR,EAEGC,IAFH,CAEQP,mBAFR,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAAClB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB,EADiB,CAEjB;;AACAT,MAAAA,IAAI;AACL,KAPH;AAQD,GATC,CAAF;AAYAD,EAAAA,EAAE,CAAC,0DAAD,EAA6D,UAACC,IAAD,EAAU;AACvEV,qBAAKW,OAAL,CAAaC,iBAAb,EACGC,IADH,CACQ,kBADR,EAEGC,IAFH,CAEQR,yBAFR,EAGGS,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,MAAAA,GAAG,CAAClB,MAAJ,CAAWmB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAT,MAAAA,IAAI;AACL,KANH;AAOD,GARC,CAAF;AASD,CAjCO,CAAR","sourcesContent":["import assert from 'assert';\r\nimport chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport { expect } from 'chai';\r\nimport  app from '../index';\r\nimport trips from '../models/Trips';\r\nimport users from '../models/Users';\r\nimport bookings from '../models/Bookings';\r\n\r\nconst should = chai.should();\r\nchai.use(chaiHttp);\r\n\r\nconst bookTripDetails = {\r\n    tripId : '1',\r\n    userEmail : 'nicolas@gmail.com',\r\n  };\r\n  \r\n  const bookTripDetailsUndefinned = {\r\n    userEmail : 'nicolas@gmail.com',\r\n  };\r\n    \r\n  const bookTripDetailsTrue = {\r\n    tripId : '1',\r\n    userEmail : 'nicolas@gmail.com',\r\n  };\r\n\r\n  describe('booking', () => {\r\n    it('it should not book a trip with undefinned values', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/bookings')\r\n        .send(bookTripDetailsUndefinned)\r\n        .end((err, res) => {\r\n          res.should.have.status(400);\r\n          done();\r\n        });\r\n    });\r\n  \r\n  \r\n    it('should return a 200 status and trip data when everything is okey', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/bookings')\r\n        .send(bookTripDetailsTrue)\r\n        .end((err, res) => {\r\n          res.should.have.status(201);\r\n          //chai.expect(res.body.data.email).equal('nicolaskasolene@gmail.com');\r\n          done();\r\n        });\r\n    });\r\n  \r\n\r\n    it('should not create book a trip with undefinned parameters', (done) => {\r\n      chai.request(app)\r\n        .post('/api/v1/bookings')\r\n        .send(bookTripDetailsUndefinned)\r\n        .end((err, res) => {\r\n          res.should.have.status(400);\r\n          done();\r\n        });\r\n    });\r\n  }); "],"file":"bookingsTest.js"}