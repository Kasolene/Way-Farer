{"version":3,"sources":["../../server/middlewares/validateInput.js"],"names":["validateSignUp","req","res","next","schema","Joi","object","keys","email","string","required","trim","error","firstName","min","lastName","password","result","validate","body","status","json","message","value","validateSignIn","validateTrip","busLicenseNumber","strict","regex","seatingCapacity","number","origin","destination","tripDate","date","fare"],"mappings":"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","sourcesContent":["import Joi from 'joi';\r\n\r\n/**\r\n   * This function validates in credentials at the time of signing up.\r\n   * @param {*} req -Request to be executed or performed\r\n   * @param {*} res -Response to be returned\r\n   * @param {*} next -Skip process if satifies.\r\n   */\r\n\r\nexport function validateSignUp(req, res, next) {\r\n  const schema = Joi.object().keys({\r\n    email: Joi.string().email().required().trim()\r\n      .error(() => 'The valid email is required'),\r\n    firstName: Joi.string().min(3).required().trim()\r\n      .error(() => 'The first name is required and and must be of minimum 3 characters '),\r\n    lastName: Joi.string().min(3).required().trim()\r\n      .error(() => 'The last name is required and and must be of minimum 3 characters'),\r\n    password: Joi.string().min(6).required().trim()\r\n      .error(() => 'The password is required and and must be of minimum 6 characters'),\r\n  });\r\n\r\n  const result = Joi.validate(req.body, schema);\r\n  if (result.error) {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      error: result.error.message,\r\n    });\r\n  }\r\n  if (!req.value) { req.value = {}; }\r\n  req.value.body = result.value;\r\n  next();\r\n}\r\n\r\nexport function validateSignIn(req, res, next) {\r\n  const schema = Joi.object().keys({\r\n    email: Joi.string().email().required().error(() => 'The valid email is required'),\r\n    password: Joi.string().required().trim()\r\n      .error(() => 'The password is required '),\r\n  });\r\n\r\n  const result = Joi.validate(req.body, schema);\r\n  if (result.error) {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      error: result.error.message,\r\n    });\r\n  }\r\n  next();\r\n}\r\n\r\nexport function validateTrip(req, res, next) {\r\n  const schema = Joi.object().keys({\r\n    busLicenseNumber: Joi.string().trim().strict().regex(/^[A-Za-z]{3}-[0-9]{3}-[A-Za-z]{2}$/)\r\n      .required()\r\n      .error(() => 'The bus lincese number is required and with this format XXX-XXX-XX '),\r\n    seatingCapacity: Joi.number().required()\r\n      .error(() => 'The seating capacity is equired and can not be less than 1'),\r\n    origin: Joi.string().trim()\r\n      .required()\r\n      .error(() => 'The origin is required and should not be less than 3 characters'),\r\n    destination: Joi.string().trim()\r\n      .required()\r\n      .error(() => 'The destination is required and should not be less than 3 characters '),\r\n    tripDate: Joi.date().required()\r\n      .error(() => 'The trip date is required \"'),\r\n    fare: Joi.number().required()\r\n      .error(() => 'The fare is equired and can not be less than 1'),\r\n  });\r\n\r\n  const result = Joi.validate(req.body, schema);\r\n  if (result.error) {\r\n    return res.status(400).json({\r\n      status: 400,\r\n      message: (result.error.message),\r\n    });\r\n  }\r\n  if (!req.value) { req.value = {}; }\r\n  req.value.body = result.value;\r\n  next();\r\n}\r\n"],"file":"validateInput.js"}